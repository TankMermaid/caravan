# Template Snakefile for single-end read processing
# How to use this file:
#  1. Copy the snakemake-config.json.template to snakemake-config.json
#  2. Edit the values in snakemake-config.json
#  3. Copy this file to your work directory as 'Snakefile'
#  4. Adjust the parameters
#  5. Call 'snakemake folders' to create the folder structure
#  6. Call 'snakemake'
#
#  Requirements: snakemake, the greengenes database, my rdp_classify.py script

# parameters for preprocessing
INPUT_FILE = "filename of input fastq with primer removed"
LENGTH = 131 # length at which to trim sequences
MAXEE = 1.5 # maximum number of errors for quality filtering

# parameters for OTU calling
DENOVO_IDS = [97, 99] # percent identities for de novo clustering
GG_IDS = [97, 99] # percent identities for greengenes reference clustering

configfile: "location of your snakemake-config.json file"

# enumerate output files
OUTS = ["otu/gg/gg{}".format(x) for x in GG_IDS] + \
  ["otu/denovo/denovo{}".format(x) for x in DENOVO_IDS] + \
  ["otu/rdp/rdp_{}".format(x) for x in ["k", "p", "c", "o", "f", "g"]]

rule final:
    input: expand("{out}.counts", out=OUTS)

rule folders:
    shell:
        "mkdir -p proc otu/rdp otu/gg otu/denovo"

rule truncate:
    input:
        INPUT_FILE
    output:
        "proc/trunc.fq"
    shell:
        "{config[van]} truncate length {LENGTH} -t fastq {input} > {output}"

rule filter:
    input:
        "proc/trunc.fq"
    output:
        "proc/filter.fa"
    shell:
        "{config[van]} filter -e {MAXEE} {input} > {output}"

rule derep:
    input:
        "proc/filter.fa"
    output:
        derep = "derep.fa", prov = "prov.yaml"
    shell:
        "{config[van]} derep {input} -i {output.prov} -o {output.derep}"

rule denovo:
    input:
        "derep.fa"
    output:
        fasta = "otu/denovo/denovo{id}.fa", uparse = "otu/denovo/denovo{id}.up"
    shell:
        "{config[van]} denovo {wildcards.id} {input} {output.fasta} -i {output.uparse}"

rule fixrank:
    input:
        "derep.fa"
    output:
        "otu/rdp/derep.fixrank"
    shell:
        "rdp_classify.py {input} {output}"

rule rdp:
    input:
        "otu/rdp/derep.fixrank"
    output:
        "otu/rdp/rdp_{rank}.yaml"
    shell:
        "{config[van]} rdp {input} {wildcards.rank} > {output}"

rule gg:
    input:
        "derep.fa"
    output:
        "otu/gg/gg{id}.b6"
    shell:
        "{config[van]} ref {input} {config[greengenes_dir]}/{wildcards.id}_otus.fasta {wildcards.id} {output}"

rule parse:
    input:
        "otu/{method}/{method}{id}.{ext}"
    output:
        "otu/{method}/{method}{id}.yaml"
    wildcard_constraints:
        ext="(b6|up)"
    shell:
        "{config[van]} parse {input} -o {output}"

rule tables:
    input:
        membership = "{method}.yaml", prov = "prov.yaml"
    output:
        "{method}.counts"
    shell:
        "{config[van]} otu_table {input.prov} {input.membership} > {output}"
